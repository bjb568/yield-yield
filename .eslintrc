{
	"env": {
		"es6": true,
		"node": true
	},
	"rules": {
		////
		// Objects

		// Use the literal syntax for object creation.
		"no-new-object": 2,

		// Don't use reserved words as keys. 
		"no-reserved-keys": 2,
		////

		////
		// Arrays : Use the literal syntax for array creation.
		"no-array-constructor": 2,
		////

		////
		// Strings
		// Use single quotes for strings
		"quotes": [2, "single"],

		// Strings longer than 120 characters should be written across multiple
		// lines using string concatenation.
		"max-len": [2, 120, 4],
		////

		// Functions
		// no-loop-func: false...
		
		// TODO: Never name a parameter arguments

		// Properties
		// Use dot notation
		dot-notation: 2,

		////
		// Variables
		// Always use var to declare variables.
		"no-undef": 2,

		// XXX: Use one var declaration per variable. 
		"no-sequences": 2,

		// TODO: Declare unassigned variables last.

		// Assign variables at the top of their scope
		"vars-on-top": 2,
		////

		////
		// Hoisting
		"no-use-before-define": 2,
		////

		"eqeqeq" : 0,

		//TODO: Use shortcuts.
		////

		////
		// Blocks
		// Use braces with all multi-line blocks.
		"curly": [2, "multi-line"],
		////

		////
		// Comments 
		// Use /** ... */ for multiline comments use  Include a description,
		// specify types and values for all parameters and return values.
		"valid-jsdoc": [1 , {}],

		// Use // for single line comments. Place single line comments on a newline
		// above the subject of the comment. Put an empty line before the comment.
		// TODO:

		// Prefixing your comments with FIXME or TODO 
		"no-warning-comments": false,
		////

		////
		// Whitespace
		// Use soft tabs set to 2 spaces.
		"indent": [2, 2],

		// Place 1 space before the leading brace
		"space-before-blocks": 2,

		// Set off operators with spaces
		"space-infix-ops": 2,

		// End files with a single newline character
		"eol-last": 2,

		// TODO: Use indentation when making long method chains.

		// TODO: Leave a blank line after blocks and before the next statement
		////

		////
		// Commas
		// Leading commas: Nope.
		"comma-style": [2, "last"],

		// Additional trailing comma: Nope.
		"comma-dangle": 2,
		////

		////
		// Semicolons
		"semi": 2,
		////

		//// Type Casting & Coercion

		// Use parseInt for Numbers and always with a radix for type casting.
		radix: 2,

		// Booleans:
		"no-new-wrappers": 2,
		////

		//// Naming Conventions

		// TODO: Avoid single letter names. Be descriptive with your naming.

		// XXX: Use camelCase when naming objects, functions, and instances.
		"camelcase": 2,

		// Use PascalCase when naming constructors or classes.
		"new-cap": [2, {}],

		// Use a leading underscore _ when naming private properties.
		"no-underscore-dangle": false,

		// When saving a reference to this use _this.
		"consistent-this": [2, "_this"],

		"strict": 2,

		"consistent-return": 0

	}
}
